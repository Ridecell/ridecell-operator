/*
Copyright 2020 Ridecell, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package components_test

import (
	"github.com/aws/aws-sdk-go/aws"
	sh "github.com/aws/aws-sdk-go/service/securityhub"
	"github.com/aws/aws-sdk-go/service/securityhub/securityhubiface"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"os"

	"github.com/Ridecell/ridecell-operator/pkg/components"
	vrcomponents "github.com/Ridecell/ridecell-operator/pkg/controller/vulnerability_report/components"
	aquav1alpha1 "github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
)

// A mock Security Hub client
type mockSHClient struct {
	securityhubiface.SecurityHubAPI
	mockPutSuccess   bool
	mockHasValidLink bool
}

var _ = Describe("Vulnerability report Defaults Component", func() {
	var comp components.Component
	var mockSH *mockSHClient
	os.Setenv("AWS_ACCOUNT_ID", "123456789")

	BeforeEach(func() {
		report := &aquav1alpha1.VulnerabilityReport{
			ObjectMeta: metav1.ObjectMeta{Name: "test-report", Namespace: "summon-dev"},
			Report: aquav1alpha1.VulnerabilityScanResult{
				Artifact: aquav1alpha1.Artifact{
					Repository: "summon",
					Tag:        "1.1",
				},
				Registry: aquav1alpha1.Registry{
					Server: "docker",
				},
				Vulnerabilities: []aquav1alpha1.Vulnerability{
					aquav1alpha1.Vulnerability{
						VulnerabilityID:  "TEST-CVE",
						Resource:         "apt",
						InstalledVersion: "1.1",
						FixedVersion:     "1.2",
						Severity:         "LOW",
						Title:            "Title",
						Description:      "Description",
						Links:            []string{},
					},
				},
			},
		}

		ctx.Client = fake.NewFakeClient(report)
		comp = vrcomponents.NewVulnerabilityReport()
		mockSH = &mockSHClient{}
		comp.InjectSecurityHubAPI(mockSH)
	})

	It("puts report to security hub", func() {
		Expect(comp).To(ReconcileContext(ctx))
		Expect(mockSH.mockPutSuccess).To(BeTrue())
	})

	It("selects valid link and puts report to security hub", func() {
		report.Report.Vulnerabilities[0].Links = []string{"http://notvalidlink", "https://validlink.io/abc"}
		Expect(comp).To(ReconcileContext(ctx))
		Expect(mockSH.mockHasValidLink).To(BeTrue())
		Expect(mockSH.mockPutSuccess).To(BeTrue())
	})

})

func (m *mockSHClient) BatchImportFindings(batchInput *sh.BatchImportFindingsInput) (*sh.BatchImportFindingsOutput, error) {
	if len(batchInput.Findings) > 100 {
		m.mockPutSuccess = false
		return &sh.BatchImportFindingsOutput{}, awserr.New(sh.ErrCodeInvalidInputException, "awsmock_taguser: batch findings array limit exceeded", nil)
	}
	if batchInput.Findings[0].Remediation != nil && batchInput.Findings[0].Remediation.Recommendation.Url == "https://validlink.io/abc" {
		m.mockHasValidLink = true
	}
	m.mockPutSuccess = true
	return &sh.BatchImportFindingsOutput{
		FailedCount: aws.Int64(0),
	}, nil
}
