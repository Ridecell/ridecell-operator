version: 2.1

defaults:
  etcd: &etcd
    image: quay.io/coreos/etcd:v3.3
  kube-apiserver: &kube-apiserver
    image: gcr.io/google-containers/kube-apiserver-amd64:v1.14.2
    command:
    - /usr/local/bin/kube-apiserver
    - --etcd-servers=http://localhost:2379
    - --cert-dir=.
    - --admission-control=AlwaysAdmit
  kube-controller-manager: &kube-controller-manager
    image: gcr.io/google-containers/kube-controller-manager-amd64:v1.14.2
    command:
    - /usr/local/bin/kube-controller-manager
    -  --master=http://localhost:8080
    - --controllers=garbagecollector,namespace

executors:
  rc_test:
    docker:
    - image: circleci/golang:1
    working_directory: /go/src/github.com/Ridecell/ridecell-operator
    environment:
      KUBECONFIG: /go/src/github.com/Ridecell/ridecell-operator/hack/config.yml
      USE_EXISTING_CLUSTER: true

commands:
  rc_setup:
    steps:
    - checkout
    - restore_cache:
        keys:
        - v1-vendor-{{ checksum "Gopkg.lock" }}
        - v1-vendor
    - run: make dep
    - run: echo "export RAND_OWNER_PREFIX=x$(head -c 512 /dev/urandom | tr -dc 'a-z0-9' | head -c 8)" >> $BASH_ENV

  rc_cleanup:
    parameters:
      aws:
        default: false
        type: boolean
      cover:
        type: string
    steps:
    - run: mkdir workspace workspace/cover && cp gover.coverprofile workspace/cover/test_<< parameters.cover >>.coverprofile
    - persist_to_workspace:
        root: workspace
        paths:
        - cover/test_<< parameters.cover >>.coverprofile
    - when:
        condition: << parameters.aws >>
        steps:
        - run:
            command: go run scripts/aws_cleanup/delete_operator_resources.go
            when: always
            no_output_timeout: 15m

  rc_test:
    parameters:
      aws:
        default: false
        type: boolean
      cover:
        type: string
      timeout:
        default: 10m
        type: string
    steps:
    - rc_setup
    - run:
        command: make test
        no_output_timeout: << parameters.timeout >>
    - rc_cleanup:
        cover: << parameters.cover >>
        aws: << parameters.aws >>

jobs:
  test:
    executor: rc_test
    steps:
    - rc_setup
    - run: make generate vet
    # Use a funky grep and xargs thing to speed this up so it doesn't spend time building the non-unit suites.
    - run: grep -l -R @unit cmd pkg | xargs -n 1 dirname | xargs ginkgo -focus @unit --randomizeAllSpecs --randomizeSuites --cover --trace --progress -v -compilers 4
    - run: gover
    - rc_cleanup:
        cover: unit
    - save_cache:
        key: v1-vendor-{{ checksum "Gopkg.lock" }}
        paths:
        - vendor/

  test_postgres:
    executor: rc_test
    docker:
    - image: circleci/golang:1
    - *etcd
    - *kube-apiserver
    - *kube-controller-manager
    - image: postgres:11-alpine
      environment:
        POSTGRES_PASSWORD: rootpass
    environment:
      GINKGO_ARGS: -focus @postgres
      POSTGRES_URI: postgres://postgres:rootpass@localhost/postgres
    steps:
    - rc_test:
        cover: postgres

  test_aws:
    executor: rc_test
    docker:
    - image: circleci/golang:1
    - *etcd
    - *kube-apiserver
    - *kube-controller-manager
    environment:
      GINKGO_ARGS: -focus @aws -skip '@(rds|snapshot)'
    steps:
    - rc_test:
        cover: aws
        aws: true

  test_rds:
    executor: rc_test
    docker:
    - image: circleci/golang:1
    - *etcd
    - *kube-apiserver
    - *kube-controller-manager
    environment:
      GINKGO_ARGS: -focus @rds
    steps:
    - rc_test:
        cover: rds
        aws: true
        timeout: 30m

  test_rdssnapshot:
    executor: rc_test
    docker:
    - image: circleci/golang:1
    - *etcd
    - *kube-apiserver
    - *kube-controller-manager
    environment:
      GINKGO_ARGS: -focus @snapshot
    steps:
    - rc_test:
        cover: rdssnapshot
        aws: true
        timeout: 25m

  test_rabbitmq:
    executor: rc_test
    docker:
    - image: circleci/golang:1
    - *etcd
    - *kube-apiserver
    - *kube-controller-manager
    - image: rabbitmq:3-management-alpine
      environment:
        RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 256Mi
    environment:
      RABBITMQ_URI: http://guest:guest@localhost:15672
      GINKGO_ARGS: -focus @rabbitmq
    steps:
    - rc_test:
        cover: rabbitmq

  test_other:
    executor: rc_test
    docker:
    - image: circleci/golang:1
    - *etcd
    - *kube-apiserver
    - *kube-controller-manager
    working_directory: /go/src/github.com/Ridecell/ridecell-operator
    environment:
      GINKGO_ARGS: -skip '@(postgres|aws|rds|snapshot|rabbitmq|unit)'
    steps:
    - rc_test:
        cover: other
        aws: true

  coveralls:
    executor: rc_test
    steps:
    - rc_setup
    - run: make generate
    - run: gover
    - run: goveralls -coverprofile=gover.coverprofile -service=circle-ci -repotoken=$COVERALLS_TOKEN

  crds:
    executor: rc_test
    steps:
    - rc_setup
    - run: make manifests
    - persist_to_workspace:
        root: config
        paths:
        - crds

  build:
    docker:
    - image: us.gcr.io/ridecell-public/docker-gcloud:2018-09-17
    steps:
    - checkout
    - setup_remote_docker
    - attach_workspace:
        at: workspace
    - run: cp -r workspace/crds/* config/crds/
    - run: docker build -t us.gcr.io/ridecell-1/ridecell-operator:${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}-${CIRCLE_BRANCH} .
    - run: echo ${GCP_SERVICE_ACCOUNT} > gcp-key.json
    - run: gcloud auth activate-service-account --key-file gcp-key.json
    - run: gcloud --quiet config set project ridecell-1
    - run: gcloud auth configure-docker
    - run: docker push us.gcr.io/ridecell-1/ridecell-operator:${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}-${CIRCLE_BRANCH}
    - run: echo ${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}-${CIRCLE_BRANCH} > workspace/tag
    - persist_to_workspace:
        root: workspace
        paths:
        - tag

  # deploy:
  #   docker:
  #   - image: us.gcr.io/ridecell-public/helm-gcloud:2.8.2
  #   steps:
  #   - checkout
  #   - attach_workspace:
  #       at: workspace
  #   - run: echo ${GCP_SERVICE_ACCOUNT_SANDBOX} > gcp-key.json
  #   - run: gcloud auth activate-service-account --key-file gcp-key.json
  #   - run: gcloud --quiet config set project ridecell-sandbox
  #   - run: gcloud container clusters get-credentials noah-test --region=us-west1
  #   - run: cp workspace/crds/* helm/templates/crds/
  #   - run: helm upgrade --install --namespace ridecell-operator --set tag=$(cat workspace/tag) ridecell-operator ./helm

workflows:
  version: 2
  default:
    jobs:
    - test
    - test_postgres:
        requires:
        - test
    - test_aws:
        requires:
        - test
    - test_rds:
        requires:
        - test
    - test_rdssnapshot:
        requires:
        - test
    - test_rabbitmq:
        requires:
        - test
    - test_other:
        requires:
        - test
    - coveralls:
        requires:
        - test
        - test_postgres
        - test_aws
        - test_rds
        - test_rdssnapshot
        - test_rabbitmq
        - test_other
    - crds:
        requires:
        - test
    - build:
        requires:
        - test
        - test_postgres
        - test_aws
        - test_rabbitmq
        - test_other
        - crds
        # Does not require test_rds to allow for a little more parallelism, shaves 5m off the whole process.
    # - deploy:
    #     requires:
    #     - build
    #     filters:
    #       branches:
    #         only: master
